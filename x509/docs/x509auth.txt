X509 Auth Sources
=================

The x509 module provides two authentication modules for simpleSAMLphp:

`x509:X509AuthOCSP`
: Authenticate the user using a x509 certificate which is validated via OCSP

`x509:X509AuthCRL`
: Authenticate the user using a x509 certificate which is validated via a CRL

The only difference between these modules is the way the certificate is
validated.


`Apache configuration`
----------------------

The web server must be configured to ask the user browser to provide a
certificate. It can be configured this way just for the login url of
the x509 module or for the whole simpleSAMLphp namespace. In the first
case the user will be asked for his certificate when he clicks on the
login link. In the second case as soon as the user enters the simpleSAMLphp
instance the certificate will be sent but its fields won't be read and
it won't be validated until the user clicks on the login link.

Let's see a configuration example:

	<Location /simplesaml/module.php/x509/login.php>
		SSLVerifyClient require
		SSLVerifyDepth 2
		SSLCACertificatePath /directory/with/CAs/certificates/
		SSLOptions +StdEnvVars +ExportCertData
	</Location>

This represent the first alternative where we ask for the certificate only
in the /simplesaml/module.php/x509/login.php url. If you want to use the
other method, just remove the <Location> directive and leave its body by
itself.


`CA certificates directory`
---------------------------

In the previous Apache configuration section there is a route to a
directory with the CAs of the certificates you let the user use.

The certificates of the CA should be in PEM format with hash links to them.

For example, if you have this certificate:

  $ ls /etc/ssl/CAs/
  my-ca.crt

You will need to create the following soft link:

  $ ln -s my-ca.crt `openssl x509 -hash -noout -in my-ca.crt`.0
  $ ls /etc/ssl/CAs/
  1dbdda5b.0 my-ca.crt

Check your openssl distribution for utilities for creating these links.

You can also concatenate all your CAs certificates in one big file and
use the SSLCACertificateFile Apache directive instead.


`authsources.php configuration`
-------------------------------

Back in simpleSAMLphp domain we need to configure our authentication sources
in the authsources.php file. Let's see an exanmple for each of our modules:

   'x509-with-ocsp' => array(
		'x509:X509AuthOCSP',
		'capath' => '/etc/ssl/CAs',
		'ocspurl' => 'http://ocsp.dnie.es/',
	),

   'x509-with-crl' => array(
		'x509:X509AuthCRL',
		'capath' => '/etc/ssl/CAs',
		'crlpath' => '/etc/ssl/CRLs',
	),

The `capath` directory should be the same directory as the one we put
in the Apache configuration.

As mentioned above the only difference between both modules is the way they
validate the certificate. The X509AuthOCSP uses an OCSP server so it needs
an URL to contact with that server. On the other hand, the X509AuthCRL uses
a Certificate Revocation List (CRL) to check locally if the certificate has
been revocated. The `crlpath` parameter is a directory where you store the
CRLs that you have previously downloaded, probably using a crontab job.


`Renaming/adding attributes`
----------------------------

SimpleSAMLphp authentication filters only work when the authentication source
is used by an IdP and the attributes are sent to a SP. But sometimes you
want to use an authentication method just to provide access to a certain
module in simpleSAMLphp, e. g. Janus. In these cases it make sense to rename
one of the attributes of the certificate so you can give your module what
it expect to recive. Let's see an example:

   'x509-with-ocsp' => array(
		'x509:X509AuthOCSP',
		'capath' => '/etc/ssl/CAs',
		'ocspurl' => 'http://ocsp.dnie.es/',
		'attributesmap' => array('serialNumber' => 'uid'),
	),

In this example we are telling the module to copy the `serialNumber` attribute
found in the certificate into a new `uid` attribute which is the one needed in
the module we are using. Note that the `serialNumber` is still there.